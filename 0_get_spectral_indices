// |
// | Get spectral values for plot points
// | [valpasq@bu.edu], 2020
// |

var utils = require('users/valeriepasquarella/condition_monitoring:utils.js');

// Extract period
var YEAR = 2017
var MONITOR_START = YEAR + '-01-01';
var MONITOR_END = YEAR + '-12-31';

var WHICH_SAMPLE = 1;

var VERSION = 'SPECTRAL'; // for export naming
var NODATA = 99;
var OUTPUT_CRS = 'EPSG:4326'


if (WHICH_SAMPLE == 1) {
  // Harvard Forest / Quabbin hotspots
  var SAMPLE = ee.FeatureCollection('projects/ee-valeriepasquarella/assets/HF-GM/PlotDefHarvSimple')
  var fileName = 'plots_ma_quabbin_' + YEAR + '_' + VERSION 
}

if (WHICH_SAMPLE == 2) {
  // UConn / Burlap plots
  var SAMPLE = ee.FeatureCollection('projects/ee-valeriepasquarella/assets/CT-GM/FEN_BurlapSurvey_Coords')
  var fileName = 'plots_ct_burlap_' + YEAR + '_' + VERSION 
}

// ---------------------------------- Preprocess ---------------------------------- 


// Function to apply spectral transforms
function spectralTransforms(image) {
  
  var scaled = image.divide(10000)
  
  // Set up dictionary using band name keys.
  var dict = {
    blue: scaled.select("blue"),
    green: scaled.select("green"),
    red: scaled.select("red"),
    nir: scaled.select("nir"),
    swir1: scaled.select("swir1"),
    swir2: scaled.select("swir2"),
  }

  // Normalized Difference Vegetation Index (NDVI)
  var ndvi = scaled.normalizedDifference(['nir', 'red'])
    .rename("ndvi").unmask(NODATA)

  // Tasseled Cap Transform -- Crist (1985) / TM surface reflectance
  var tcg = scaled.expression("-0.1603*blue - 0.2819*green - 0.4934*red + 0.7940*nir - 0.0002*swir1 - 0.1446*swir2", dict)
    .rename("tcg").unmask(NODATA)

  var evi = scaled.expression(
    '2.5 * ((nir - red) / (nir + 6 * red - 7.5 * blue + 1))', dict)
    .rename("evi").unmask(NODATA)
  
  var sr = image.select('nir').divide(image.select('red'))
    .rename('sr').unmask(NODATA)
  
  // Transform stack
  return scaled.unmask(NODATA)
      .addBands(ndvi).addBands(tcg).addBands(evi).addBands(sr)
      // .reproject(OUTPUT_CRS)
      // .reproject(OUTPUT_CRS, null, 30)
      .copyProperties(image, ["system:time_start", "WRS_PATH", "WRS_ROW", "SENSING_TIME", "SATELLITE"])
   
}


// Function to build monitoring collection
var monitorTS = function(clipBound, MONITOR_START, MONITOR_END) {
  
// Get Landsat 5 imagery
  var collection5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
      .filterDate(MONITOR_START, MONITOR_END)  
      .filterBounds(clipBound) 
      .filterMetadata('CLOUD_COVER_LAND', "less_than", 80)
      .map(utils.preprocess457) 

  // Get Landsat 7 imagery
  var collection7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterDate(MONITOR_START, MONITOR_END) 
      .filterBounds(clipBound) 
      .filterMetadata('CLOUD_COVER_LAND', "less_than", 80)
      .map(utils.preprocess457) 

  // Get  Landsat 8 imagery
  var collection8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
      .filterDate(MONITOR_START, MONITOR_END) 
      .filterBounds(clipBound) 
      .filterMetadata('CLOUD_COVER_LAND', "less_than", 80)
      .map(utils.preprocess8)  
 
  // FINAL LTS COLLECTION
  var monitorC = collection5.merge(collection7).merge(collection8)
      .map(function(image) {return image.set({
          'SENSING_TIME': ee.String(image.get('SENSING_TIME')).split('T').get(0), 
          'WRS_PATH': image.get('WRS_PATH')})
      })
      .map(utils.addCloudScore)
      .map(utils.maskCloudScore) 
      .map(spectralTransforms)
      .sort('system:time_start') 
      
  // Return TC images for monitoring period
  return monitorC;
  
  };
  

// Function to extract predictions at point samples
function samplePredictions(collection, point) {
   /* Reduce an image collection to a series of points at a sample location */
   
   var tsCol = ee.ImageCollection(collection).map(function(i) {
      var imageMean = ee.Image(i).reduceRegion({
        reducer: ee.Reducer.mean(),
        geometry: point.geometry(),
        scale: 30,
        crs: OUTPUT_CRS
      });

      var outPoint = ee.Feature(point.geometry(), {
          'date': i.get('SENSING_TIME'),
          'image': i.get('system:index'),
          'mask': imageMean.get('mask'),
          'path': i.get('WRS_PATH'),
          'row': i.get('WRS_ROW'),
          'satellite': i.get('SATELLITE'),
          'ndvi': imageMean.get('ndvi'),
          'evi': imageMean.get('evi'),
          'tcg': imageMean.get('tcg'),
          'sr': imageMean.get('sr'),
          'blue': imageMean.get('blue'),
          'green': imageMean.get('green'),
          'red': imageMean.get('red'),
          'nir': imageMean.get('nir'),
          'swir1': imageMean.get('swir1'),
          'swir2': imageMean.get('swir2')
  
      });
      
      return outPoint.copyProperties(point);
  });
  return tsCol;
}

// Main function to map over for every sample
var getData = function(point) {
  var inputs = ee.ImageCollection(collectPredictions)
      .filterBounds(point.geometry());

  var inputFC = ee.FeatureCollection(samplePredictions(inputs, point));

  return inputFC;
};


// Get study area boundary
var clip_bound = SAMPLE.geometry().bounds()

// Get monitoring period imagery
var monitor = monitorTS(clip_bound, MONITOR_START, MONITOR_END);
print(monitor)
Map.addLayer(monitor.first().select('ndvi'), {min:0, max:1})

// Add mask band
var collectPredictions = monitor.map(function(i) {
      var iMask = i.select('ndvi').lt(NODATA).rename('mask')
      return i.addBands(iMask)
     })
     



// Map over the sample and flatten to a single feature collection
var samplesData = SAMPLE.map(getData).flatten();
print('export - size:', samplesData.size());
print('export - first 10', samplesData.limit(10))


// Export
Export.table.toDrive({
  collection: samplesData,
  description: 'exportTable_' + VERSION + '_' + WHICH_SAMPLE,
  folder: 'ee-conditionassessment',
  fileNamePrefix: fileName,
});




