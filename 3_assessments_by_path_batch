/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = ee.FeatureCollection("projects/ee-valeriepasquarella/assets/simplified_southernNE"),
    imageCollection2 = ee.ImageCollection("projects/sites-project/baselines_v6-2_by_path_monitoring");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var RESULTS_COLLECTION = imageCollection2

var OUTPUT_CRS = 'EPSG:5070'
var GFC_TCC = 75;

var weightScore = function(image) {
 var score = image.select('score_mean')
 var nobs = image.select('score_count')
 var weighted = score.multiply(nobs).rename('score_weighted')
 
 return image.addBands(weighted).reproject(OUTPUT_CRS, null, 30)
}

// Masking (for display)
var gfc = ee.Image("UMD/hansen/global_forest_change_2018_v1_6")


var gfc_mask = gfc.select('treecover2000')
  .gte(GFC_TCC)
  .reproject(OUTPUT_CRS, null, 30)



// Get baselines
var experiments = RESULTS_COLLECTION.aggregate_array('name').distinct()
var num_experiments = experiments.size().getInfo()


// Loop over experiments in baselines collection
for(var experiment = 0; experiment < num_experiments; experiment++){
  
  var experiment_name = experiments.get(experiment)
  // print('Experiment:', experiment_name)
  
  var result = ee.ImageCollection(RESULTS_COLLECTION
    .filterMetadata('name', 'equals', experiment_name))
  
  // Get total number of observations per pixel
  var totalObs = result.select('score_count').reduce('sum')
    .reproject(OUTPUT_CRS, null, 30)
  
  // Weight mean scores by nobs per Path
  var resultWts = result.map(weightScore)
  
  // Compute weighted mean
  var resultFinal = resultWts.select('score_weighted')
    .reduce('sum')
    .divide(totalObs)
    
  Map.addLayer(resultFinal, viz)
  
  // Export.image.toAsset({
  //   image: resultFinal,
  //   description: DEPENDENT + '_' + YEAR_START + '-' + YEAR_END + '_monitor-' + path,
  //   assetId: OUTPUT_NAME,
  //   region: clip_bound,
  //   crs: baseline.projection().crs(),
  //   scale: 30,
  //   maxPixels: 1e13,
  // })
}


  



// Palette for mapped results
var min = -4;
var max = 0;
var palette = ['red', 'orange', 'yellow', 'blue']
var viz = {min: min, max: max, palette: palette};




var style = {
  'Figure': [{
      featureType: 'all',
      stylers: [{ color: '#000000'}]
  }]
};

// Set map options.
Map.setOptions(null, style);
Map.setOptions('SATELLITE')

