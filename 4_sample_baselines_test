/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("projects/ee-valeriepasquarella/assets/wrs2_descending");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// |
// | Landsat Time Series Assessment -- Sample plot locations
// | [valpasq@bu.edu], 2020
// |
// |
// | This script reads a collection of assessment results and samples
// | plot locations to generate a data table where rows = n plots, 
// | and columns = m "experiments"/baseline configurations.

// ---------------------------------- Imports & Outputs ---------------------------------- 

var VERSION = 'v3-0'

// var RESULTS_FN = 'projects/sites-project/baselines_v6-3_by_path_monitoring_assessment'
// var EXPERIMENTS = ee.ImageCollection(RESULTS_FN)
var BASELINES = ee.ImageCollection('projects/sites-project/baselines_v6-3_by_state')


var WHICH_SAMPLE = 1;
var YEAR = 2017

var FEAT = 'rmse';

var map_result = 8
 
// ---------------------------------- Get plot dataset ---------------------------------- 

if (WHICH_SAMPLE == 1) {
  // Massachusetts
  var SAMPLE_NAME = 'ma_quabbin';
  var SAMPLE_FN = 'projects/ee-valeriepasquarella/assets/HF-GM/PlotDefHarvSimple';
  var SAMPLE = ee.FeatureCollection(SAMPLE_FN);
  
} else if (WHICH_SAMPLE == 2) {
  // Connecticut
  var SAMPLE_NAME = 'ct_burlap'
  var SAMPLE_FN = 'projects/ee-valeriepasquarella/assets/CT-GM/FEN_BurlapSurvey_Coords';
  var SAMPLE = ee.FeatureCollection(SAMPLE_FN)
    .filterMetadata('Year', 'equals', YEAR);
    
}

// ---------------------------------- Get experiments ---------------------------------- 

// Get results for selected year
var selectedExperiments = BASELINES.filterMetadata('state', 'equals', 'MA')
  .filterMetadata('time_series', 'equals', 'full')
var crs = selectedExperiments.first().projection().crs()
print(BASELINES)
print(selectedExperiments)

// ---------------------------------- Get reanalysis product ---------------------------------- 

var reanalysis_cn = 'm_reanalysis'
if (YEAR >= 2015 & YEAR <= 2018) {
  var reanalysis_fn = 'projects/ee-valeriepasquarella/assets/ForestCondition/' + YEAR + '_reanalysis_meanresiduals'
  var reanalysis = ee.Image(reanalysis_fn).reproject('EPSG:5070').rename(reanalysis_cn)
} else {
  var reanalysis = ee.Image.constant(99).rename(reanalysis_cn)
}
// print(reanalysis)

// ---------------------------------- Functions ---------------------------------- 

function collectionToImage(collection){
  var stack = ee.Image(collection.iterate(function(img, prev) {
    var score = img.select(FEAT)
    var index = ee.String('m')
      .cat(ee.String(img.get('system:index'))
      .split(img.get('version')).get(1))
      .replace('-', '_', 'g')
    score = score.rename(index)
    return ee.Image(prev).addBands(score);
  }, ee.Image(1)));

  stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
  return stack;
}

// ---------------------------------- Sample results ---------------------------------- 

// convert collection results to image
var scoreImage = collectionToImage(selectedExperiments);

// add reanalysis result
scoreImage = scoreImage.addBands(reanalysis)

// sample plot locations
var result = scoreImage.reduceRegions({
        reducer: ee.Reducer.min(),
        collection: SAMPLE,
        scale: 30,
        crs: crs
      });

// check results
print(scoreImage)
print(result)

// Export
Export.table.toDrive({
  collection: result,
  description: 'exportTable_' + SAMPLE_NAME + '_' + YEAR + '_' + FEAT,
  folder: 'ee-conditionassessment',
  fileNamePrefix: 'plots_' + SAMPLE_NAME + '_' + YEAR + '_' + VERSION + '_' + FEAT,
});


// ---------------------------------- Map result ---------------------------------- 

print('Showing results for:', ee.String(scoreImage.select(map_result).bandNames().get(0)))

var min = -4;
var max = 0;
var palette = ['red', 'orange', 'yellow', 'blue']
var viz = {min: min, max: max, palette: palette};

Map.addLayer(scoreImage.select(map_result), viz, 'result')
Map.addLayer(SAMPLE, {color: 'white'}, 'sample points');



var style = {
  'Figure': [{
      featureType: 'all',
      stylers: [{ color: '#000000'}]
  }]
};

Map.setOptions(null, style);