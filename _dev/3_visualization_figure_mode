/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var states = ee.FeatureCollection("TIGER/2018/States"),
    v9_0_annual = ee.ImageCollection("projects/sites-project/condition_monitoring/products_v9-0_by_state_annual"),
    v9_0_monthly = ee.ImageCollection("projects/sites-project/condition_monitoring/products_v9-0_by_state_monthly"),
    quabbin_plots = ee.FeatureCollection("projects/ee-valeriepasquarella/assets/HF-GM/PlotDefHarvSimple"),
    geometry = /* color: #ffffff */ee.Geometry.Point([-72.24424941466329, 42.42221199601379]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// |
// | Landsat Time Series Harmonic Condition Assessment -- 
// | Visualize products
// | 
// | [valpasq@bu.edu], 2020
// |
// |
// | This script is used to add spatially smoothed and thresholded 
// | products to the map and create exploratory charts.
// | DEMO VERSION -- FOR TESTING ONLY

// -------------------- Image Collections ---------------------
var FINAL_PRODUCTS = v9_0_annual;
var FINAL_PRODUCTS_m = v9_0_monthly;

var POINT_ROI = geometry;

var START_ASSESS = 1995;
var END_ASSESS = 2020;

var DISPLAY_YEAR = 2016;
var START_DATE = ee.Date(DISPLAY_YEAR + '-04-01').millis().getInfo();
var END_DATE = ee.Date(DISPLAY_YEAR + '-10-01').millis().getInfo();

// ---------------------- Visualization ---------------------- 
// Default palette used in Pasquarella et al. 2017, 2018

var MIN = -4;
var MAX = 4;
var PALETTE = ['red', 'orange', 'white', 'teal', 'darkblue'];
var viz = {min: MIN, max: MAX, palette: PALETTE};

var THRESHOLD = -1.5;

// var TCG_MIN = 0.15;

// ----------------------- Map Results ------------------------

// Get monthly products
var images_m = FINAL_PRODUCTS_m
    .filterMetadata('monitor_year', 'not_less_than', START_ASSESS)
    .filterMetadata('monitor_year', 'not_greater_than', END_ASSESS);

// Get annual products
var images = FINAL_PRODUCTS
    .filterMetadata('monitor_year', 'not_less_than', START_ASSESS)
    .filterMetadata('monitor_year', 'not_greater_than', END_ASSESS);

// Get list of years
var years = images
    .aggregate_array('monitor_year')
    .distinct();
var num_years = years.size().getInfo();

// Function to get score range for chart visualization
var range_fn_factory = function(mean_band, stddev_band) {
  return function(img) {
    var mean = img.select(mean_band);
    var stddev = img.select(stddev_band);
    var lower = mean.subtract(stddev).rename('lower');
    var upper = mean.add(stddev).rename('upper');
    
    return img.addBands(lower).addBands(upper);
  }; 
};

// Calculate range for charting
var scores = images.select('score_mean', 'score_stddev')
    .map(range_fn_factory('score_mean', 'score_stddev'));

var values = images.select(['tcg_mean', 'tcg_stddev'])
    .map(range_fn_factory('tcg_mean', 'tcg_stddev'));

var scores_m = images_m.map(range_fn_factory('score_mean', 'score_stddev'));

// ---------------- MONTHLY RESULTS ----------------
// Loop over months to add each product to Map
for(var month = 5; month <= 9; month++){
  
  var disp_img_m = images_m
      .filterMetadata('monitor_start', 'equals', DISPLAY_YEAR+'-0' + month + '-01')
      .mosaic();
      
  var score_disp_m = disp_img_m;
      // .focal_mean(30, 'circle', 'meters', 1);
  
  var thresh_mask_m = score_disp_m.select('score_mean').lte(THRESHOLD)
      .or(score_disp_m.select('score_mean').gte(THRESHOLD*-1));
  
  score_disp_m = score_disp_m.updateMask(thresh_mask_m);

  // c = (1 / (1 + s))^0.6;
  // c = (TanH(7*(c - 0.5)) + 1)*0.5;
  var confidence_scale_m = ee.Image(1)
      .divide(score_disp_m.select('score_stddev').add(1))
      .pow(0.6)
      .subtract(0.5).multiply(7)
      .tanh()
      .add(1).multiply(0.5);

  var score_mean_viz_alpha_m = score_disp_m.select('score_mean')
      .visualize(viz)
      .toUint8()
      .updateMask(thresh_mask_m.multiply(confidence_scale_m));
  
  Map.addLayer(score_mean_viz_alpha_m, {}, 'score 0' + month, false);
  
}

// ---------------- ANNUAL RESULTS ----------------
var disp_img = images
      .filterMetadata('monitor_year', 'equals', DISPLAY_YEAR)
      .mosaic();
      
var score_disp = disp_img;
    // .focal_mean(30, 'circle', 'meters', 1);
    // .focal_mean(150, 'square', 'meters', 1);

var thresh_mask = score_disp.select('score_mean').lte(THRESHOLD)
    .or(score_disp.select('score_mean').gte(THRESHOLD*-1));

// var tcg_mask = score_disp.select('tcg_mean').gte(TCG_MIN);
    
score_disp = score_disp
    .updateMask(thresh_mask);
    // .updateMask(tcg_mask);

// c = (1 / (1 + s))^0.6;
// c = (TanH(7*(c - 0.5)) + 1)*0.5;
var confidence_scale = ee.Image(1)
    .divide(score_disp.select('score_stddev').add(1))
    .pow(0.6)
    .subtract(0.5).multiply(7)
    .tanh()
    .add(1).multiply(0.5);

var score_mean_viz_alpha = score_disp.select('score_mean')
    .visualize(viz)
    .toUint8()
    .updateMask(thresh_mask.multiply(confidence_scale));


Map.addLayer(score_mean_viz_alpha, {}, 'score annual', true);

// ---------------- ADD STATES ----------------
// Get state outlines and style
var STATES = ee.FeatureCollection('TIGER/2018/States');

var states_list = images.aggregate_array('state')
    .distinct()
    .getInfo();
    
var states_display = STATES.filter(
    ee.Filter.inList('STUSPS', states_list)); 
    
var state_outlines = ee.Image().byte().paint({
    featureCollection: states_display,
    color: 1,
    width: 1
  }); 
  
Map.addLayer(state_outlines, {palette: 'gray'}, 'state boundaries');
Map.addLayer(quabbin_plots, {color: 'white'}, 'Quabbin plots');
 
// ---------------- MAP STYLING ----------------
var style = {
  'Figure': [{
      featureType: 'all',
      stylers: [{ color: '#000000'}]
  }]
};

Map.setOptions(null, style);
Map.setOptions('SATELLITE');

// ------------------- CHARTS -------------------
var state_code = ee.Feature(STATES.filterBounds(POINT_ROI).first())
    .get('STUSPS');
  
var series = ee.ImageCollection(scores)
    .select(['lower', 'score_mean', 'upper'])
    .filterMetadata('state', 'equals', state_code);

var series_tcg = ee.ImageCollection(values)
    .select(['lower', 'tcg_mean', 'upper'])
    .filterMetadata('state', 'equals', state_code);

var series_m = ee.ImageCollection(scores_m)
    .select(['lower', 'score_mean', 'upper'])
    .filterMetadata('state', 'equals', state_code);

var annual_time_series = ui.Chart.image.series(
      series, POINT_ROI, ee.Reducer.first(), 30) 
          .setOptions({
              vAxis: {
                  title: 'condition score',
                  viewWindow: {min: -5, max: 5},
              },
              series: {
                0: {
                    labelInLegend: '-1σ',
                    color: 'grey',
                    lineWidth: 2, 
                    pointSize: 0,
                    curveType: 'function'
                },
                1: {
                    labelInLegend: 'mean',
                    color: 'black',
                    lineWidth: 0,
                    pointSize: 3
                },
                2: {
                    labelInLegend: '+1σ',
                    color: 'silver',
                    lineWidth: 2,
                    pointSize: 0,
                    curveType: 'function'
                },
              },
          });

print(annual_time_series);

var annual_time_series_tcg = ui.Chart.image.series(
      series_tcg, POINT_ROI, ee.Reducer.first(), 30) 
          .setOptions({
              vAxis: {
                  title: 'condition score',
                  viewWindow: {min: 0, max: 0.5},
              },
             series: {
                0: {
                    labelInLegend: '-1σ',
                    color: 'yellowgreen',
                    lineWidth: 2, 
                    pointSize: 0,
                    curveType: 'function'
                },
                1: {
                    labelInLegend: 'mean',
                    color: 'green',
                    lineWidth: 0,
                    pointSize: 3
                },
                2: {
                    labelInLegend: '+1σ',
                    color: 'greenyellow',
                    lineWidth: 2,
                    pointSize: 0,
                    curveType: 'function'
                },
              },
          });
print(annual_time_series_tcg);

var annual_nobs = ui.Chart.image.series(
    images.select(['total_nobs']), POINT_ROI, ee.Reducer.first(), 30) 
        .setChartType('ColumnChart')
        .setOptions({
            vAxis: {'title': 'number of observations'},
            colors: ['black'],
        });
print(annual_nobs);


var monthly_time_series_all_years = ui.Chart.image.series(
    series_m, POINT_ROI, ee.Reducer.first(), 30) 
        .setOptions({
            vAxis: {
                title: 'condition score',
                viewWindow: {min: -10, max: 5},
            },
            hAxis: {
                title: 'Year', 
            },
            series: {
              0: {
                  labelInLegend: '-1σ',
                  color: 'grey',
                  lineWidth: 0, 
                  pointSize: 2,
              },
              1: {
                  labelInLegend: 'mean',
                  color: 'black',
                  lineWidth: 0,
                  pointSize: 3
              },
              2: {
                  labelInLegend: '+1σ',
                  color: 'silver',
                  lineWidth: 0,
                  pointSize: 2,
              },
            },
        });
print(monthly_time_series_all_years);

var monthly_nobs_all_years = ui.Chart.image.series(
    images_m.select(['total_nobs']), POINT_ROI, ee.Reducer.first(), 30) 
        .setChartType('ColumnChart')
        .setOptions({
            vAxis: {
                title: 'number of observations',
                viewWindow: {min: 0, max: 7},
            },
            colors: ['black'],
            hAxis: {
                title: 'Year', 
            },
        });
print(monthly_nobs_all_years);

var monthly_time_series = ui.Chart.image.series(
    series_m.filterMetadata('monitor_year', 'equals', DISPLAY_YEAR), POINT_ROI, ee.Reducer.first(), 30) 
        .setOptions({
            vAxis: {
                title: 'condition score',
                viewWindow: {min: -10, max: 5},
            },
            hAxis: {
                title: 'Year', 
                viewWindow: {min: START_DATE, max: END_DATE},
            },
            series: {
                0: {
                    labelInLegend: '-1σ',
                    color: 'grey',
                    lineWidth: 1, 
                    pointSize: 0,
                    curveType: 'function'
                },
                1: {
                    labelInLegend: 'mean',
                    color: 'black',
                    lineWidth: 0,
                    pointSize: 3
                },
                2: {
                    labelInLegend: '+1σ',
                    color: 'silver',
                    lineWidth: 1,
                    pointSize: 0,
                    curveType: 'function'
                },
              },
        });
print(monthly_time_series);


var monthly_nobs = ui.Chart.image.series(
    images_m.select(['total_nobs']), POINT_ROI, ee.Reducer.first(), 30) 
        .setChartType('ColumnChart')
        .setOptions({
            vAxis: {
                title: 'number of observations',
                viewWindow: {min: 0, max: 7},
            },
            colors: ['black'],
            hAxis: {
                title: 'Year', 
                viewWindow: {min: START_DATE, max: END_DATE},
            },
        });
print(monthly_nobs);
