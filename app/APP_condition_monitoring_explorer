/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var GSW = ee.Image("JRC/GSW1_2/GlobalSurfaceWater"),
    STATES = ee.FeatureCollection("TIGER/2018/States"),
    v9_0 = ee.ImageCollection("projects/sites-project/condition_monitoring/products_v9-0_by_state_annual");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// -----------------------------
var stylers = require('users/valeriepasquarella/shared:map_stylers');

//  Results collection
var images = v9_0;
    
// -----------------------------
//  Visualization parameters
var MIN = -4;
var MAX = 4;
var PALETTE = ['red', 'orange', 'white', 'teal', 'darkblue'];
var viz = {min: MIN, max: MAX, palette: PALETTE};

// var THRESHOLD = -1.5;
var MIN_NOBS = 3;

var START_YEAR = 1995;
var END_YEAR = 2020;

var GSW_MASK = 'on'; // set to 'on' to apply GSW mask

// ------------------------------------------
// Get state outlines and style
var states_list = images.aggregate_array('state')
    .distinct()
    .getInfo();
    
var states_display = STATES.filter(
    ee.Filter.inList('STUSPS', states_list)); 
    
var state_outlines = ee.Image().byte().paint({
    featureCollection: states_display,
    color: 1,
    width: 1
  }); 

// ------------------------------------------
// Get Global Surface Water Mapping Layers for masking
var OCCURRENCE_THRESH = 95;

var water_mask = GSW.select('occurrence')
    .gte(OCCURRENCE_THRESH).unmask().not();

// ------------------------------------------
// Add range info for charting
var get_range_fn_factory = function(prefix) {
  var MEAN_BAND = prefix + '_mean';
  var STDDEV_BAND = prefix + '_stddev';
  
  return function(img) {
  var mean = img.select(MEAN_BAND);
  var stddev = img.select(STDDEV_BAND);
  var lower = mean.subtract(stddev).rename(prefix + '_lower');
  var upper = mean.add(stddev).rename(prefix + '_upper');
  
  return img.addBands(lower).addBands(upper);
  };
  
};

// ------------------------------------------
// Create colorbar for legend.
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '100x10',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '2px 2px'},
  });
}

// Build legend
function makeLegend(palette) {
  var legendTitle = ui.Label({
    value: 'Detected Change in Greenness',
    style: {
      fontWeight: 'bold',
      fontSize: '13px',
      margin: '0 0 2px 0',
      padding: '0',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });
    
  var labelPanel = ui.Panel({
      widgets: [
        ui.Label('Less Green', {margin: '0px 0px', backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'}),
        ui.Label(' ', {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal', backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'}),
        ui.Label('More Green', {margin: '0px 0px',backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'})
      ],
      layout: ui.Panel.Layout.flow('horizontal'),
      style: { backgroundColor: 'rgba(255, 255, 255, 0)'}});
  
  return ui.Panel({
    widgets: [legendTitle, ColorBar(palette), labelPanel],
    style: {position: 'bottom-right',
      backgroundColor: 'rgba(255, 255, 255, 0.75)'
    }
  });
}

// Function to draw map layer
var draw_map_fn = function(year, threshold) {
    var assessment = images
      .filterMetadata('monitor_year', 'equals', year)
      .mosaic();
    
    var score_disp = assessment
      .focal_mean(30, 'circle', 'meters', 1);
  
    var thresh_mask = score_disp.select('score_mean').lte(threshold * -1)
        .or(score_disp.select('score_mean').gte(threshold));
    score_disp = score_disp.updateMask(thresh_mask);
    
    var nobs_mask = score_disp.select('total_nobs').gte(MIN_NOBS);
    score_disp = score_disp.updateMask(nobs_mask);
    
    if (GSW_MASK === 'on') {
      score_disp = score_disp.updateMask(water_mask);
    }
    
    // c = (1 / (1 + s))^0.6;
    // c = (TanH(7*(c - 0.5)) + 1)*0.5;
    var confidence_scale = ee.Image(1)
      .divide(score_disp.select('score_stddev').add(1))
      .pow(0.6)
      .subtract(0.5).multiply(7)
      .tanh()
      .add(1).multiply(0.5);
  
    var score_mean_viz_alpha = score_disp.select('score_mean')
        .visualize(viz)
        .toUint8()
        .updateMask(thresh_mask.multiply(confidence_scale));
  
  return score_mean_viz_alpha;
};

// ----------------------------------
// Create collection for charts and display
var chart_collection = images.map(get_range_fn_factory('tcg'))
    .map(get_range_fn_factory('score'));

// ----------------------------------
// Set up UI Panel - Select year
var panel = ui.Panel({
    style: {
      width: '280px',
      position: 'top-left',
      backgroundColor: 'rgba(255, 255, 255, 0.5)'
    }
  });

var panel_title = ui.Label({
    value: 'Condition Monitoring Explorer',
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      // fontFamily: 'Impact',
      margin: '0 0 2px 0',
      padding: '2',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });
    
var panel_descrip = ui.Label({
    value: 'Use the sliders to change the map year and ' + 
        'change threshold (score magnitude). ' +
        'Click the map to view time series charts.',
    style: {
      fontSize: '12px',
      margin: '0 0 2px 0',
      padding: '2',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });

var year_slider = ui.Slider({
    min: START_YEAR,
    max: END_YEAR,
    value: END_YEAR,
    step: 1,
    style: {
        stretch: 'horizontal',
        backgroundColor: 'rgba(255, 255, 255, 0)',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
    },
    onChange: function(year) {
        var threshold = threshold_slider.getValue();
        var disp_layer = ui.Map.Layer(draw_map_fn(year, threshold), {}, 'Mean condition score ' + year);
        Map.layers().set(1, disp_layer);
}});


var threshold_container = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal'),
        style: {
            backgroundColor: 'rgba(255, 255, 255, 0)',
        },
    });
    
var threshold_label = ui.Label({
    value: 'Change threshold:',
    style: {
      fontWeight: 'bold',
      fontSize: '12px',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });

var threshold_slider = ui.Slider({
    min:1, 
    max:4, 
    value:1.5, 
    step:0.5,
    style: {
        stretch: 'horizontal',
        backgroundColor: 'rgba(255, 255, 255, 0)',
        fontFamily: 'sans-serif',
    },
    onChange: function(threshold) {
      var year = year_slider.getValue();
      var disp_layer = ui.Map.Layer(draw_map_fn(year, threshold), {}, 'Mean condition score ' + year);
      Map.layers().set(1, disp_layer);
    }
  
});

panel.add(panel_title)
    .add(panel_descrip)
    .add(year_slider)
    .add(threshold_container.add(threshold_label).add(threshold_slider));

// ----------------------------------
// Set up UI Panel - Time series chart
var panel_ts = ui.Panel({
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {
      width: '550px',
      position: 'bottom-left',
      stretch: 'horizontal',
      backgroundColor: 'rgba(255, 255, 255, 0.5)'
    }
  });
  
var button_container = ui.Panel({
        layout: ui.Panel.Layout.flow('vertical'),
        style: {
            width: '120px',
            backgroundColor: 'rgba(255, 255, 255, 0)',
            stretch: 'both'
        },
    });
    
var chart_container = ui.Panel({
        layout: ui.Panel.Layout.flow('horizontal'),
        style: {
            backgroundColor: 'rgba(255, 255, 255, 1.0)',
            stretch: 'horizontal'
        },
    });


var chart_descrip = ui.Label({
    value: 'Chart options:',
    style: {
      textAlign: 'right',
      fontWeight: 'bold',
      fontSize: '13px',
      margin: '8px 2px 2px 2px',
      padding: '2',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });
    
// ----------------------------------
// Score button
var score_button = ui.Button({label: 'Condition score',
    style: {color: 'black', stretch: 'horizontal'}});
score_button.onClick(function() {
  var point = Map.layers().get(2).get('eeObject').geometry();
  
  var state_code = ee.Feature(STATES.filterBounds(point).first())
      .get('STUSPS');
  
  var series = ee.ImageCollection(chart_collection)
      .select(['score_lower', 'score_mean', 'score_upper'])
      .filterMetadata('state', 'equals', state_code);

  // Create charts
  var chart = ui.Chart.image.series(series, point, ee.Reducer.first(), 30) 
                .setOptions({
                  vAxis: {
                    title: 'Condition score',
                    viewWindow: {min: -5, max: 5},
                  },
                  series: {
                      0: {
                          labelInLegend: '-1σ',
                          color: 'orange',
                          lineWidth: 2, 
                          pointSize: 0,
                          curveType: 'function'
                      },
                      1: {
                          labelInLegend: 'mean',
                          color: 'black',
                          lineWidth: 0,
                          pointSize: 3
                      },
                      2: {
                          labelInLegend: '+1σ',
                          color: 'teal',
                          lineWidth: 2,
                          pointSize: 0,
                          curveType: 'function'
                      }
                    },
                  });
      panel_ts.clear();
      chart_container.clear();
      panel_ts.add(button_container).add(chart_container.add(chart));
});

// ----------------------------------
// TCG button
var tcg_button = ui.Button({label: 'Greenness',
    style: {color: 'black', stretch: 'horizontal'}});
tcg_button.onClick(function() {
  var point = Map.layers().get(2).get('eeObject').geometry();
  
  var state_code = ee.Feature(STATES.filterBounds(point).first())
      .get('STUSPS');
  
  var series = ee.ImageCollection(chart_collection)
      .select(['tcg_lower', 'tcg_mean', 'tcg_upper'])
      .filterMetadata('state', 'equals', state_code);

  // Create charts
  var chart = ui.Chart.image.series(series, point, ee.Reducer.first(), 30) 
                .setOptions({
                  vAxis: {
                    title: 'Tasseled Cap Greenness',
                    viewWindow: {min: 0, max: 0.5},
                  },
                  series: {
                      0: {
                          labelInLegend: '-1σ',
                          color: 'darkgreen',
                          lineWidth: 2, 
                          pointSize: 0,
                          curveType: 'function'
                      },
                      1: {
                          labelInLegend: 'mean',
                          color: 'green',
                          lineWidth: 0,
                          pointSize: 3
                      },
                      2: {
                          labelInLegend: '+1σ',
                          color: 'yellowgreen',
                          lineWidth: 2,
                          pointSize: 0,
                          curveType: 'function'
                      }
                    },
                  });
      panel_ts.clear();
      chart_container.clear();
      panel_ts.add(button_container).add(chart_container.add(chart));
});

// ----------------------------------
// Number of Observations button
var nobs_button = ui.Button({label: 'Observations', 
    style: {color: 'black', stretch:'horizontal'}});
nobs_button.onClick(function() {
  var point = Map.layers().get(2).get('eeObject').geometry();
  
  var state_code = ee.Feature(STATES.filterBounds(point).first())
      .get('STUSPS');
  
  var series = ee.ImageCollection(chart_collection)
      .select('total_nobs')
      .filterMetadata('state', 'equals', state_code);

  // Create charts
  var chart = ui.Chart.image.series(
      series, point, ee.Reducer.first(), 30) 
          .setChartType('ColumnChart')
          .setOptions({
              vAxis: {
                  title: 'Number of observations',
                  viewWindow: {min: 0, max: 30},
              },
              colors: ['black'],
              hAxis: {
                  title: 'Year', 
              },
          });
      panel_ts.clear();
      chart_container.clear();
      panel_ts.add(button_container).add(chart_container.add(chart));
});

// ----------------------------------
// Reset button
var reset_button = ui.Button({label: 'Clear Chart',
    style: {color: 'black', stretch: 'horizontal'}});
reset_button.onClick(function() {
  Map.remove(panel_ts);
  dirtyMap = false;
});

button_container
    .add(chart_descrip)
    .add(score_button)
    .add(tcg_button)
    .add(nobs_button)
    .add(reset_button);

// ----------------------------------
// Set a callback function for when the user clicks the map.
var dirtyMap = false;
Map.onClick(function(coords) {
  
  if(dirtyMap === false){
    Map.add(panel_ts);
    dirtyMap = true;
  }
  
  var pgeo = ee.Geometry.Point([coords.lon, coords.lat]);
  // Add a point to the map where the user clicked.
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  coords = point;
  Map.layers().set(2, ui.Map.Layer(point, {color: 'white'}, 'Clicked point'));
  
  var state_code = ee.Feature(STATES.filterBounds(point).first())
      .get('STUSPS');
  
  var series = ee.ImageCollection(chart_collection)
      .select(['score_lower', 'score_mean', 'score_upper'])
      .filterMetadata('state', 'equals', state_code);

  // Create charts
  var chart = ui.Chart.image.series(series, point, ee.Reducer.first(), 30) 
                .setOptions({
                  vAxis: {
                    title: 'Condition score',
                    viewWindow: {min: -5, max: 5},
                  },
                  series: {
                      0: {
                          labelInLegend: '-1σ',
                          color: 'orange',
                          lineWidth: 2, 
                          pointSize: 0,
                          curveType: 'function'
                      },
                      1: {
                          labelInLegend: 'mean',
                          color: 'black',
                          lineWidth: 0,
                          pointSize: 3
                      },
                      2: {
                          labelInLegend: '+1σ',
                          color: 'teal',
                          lineWidth: 2,
                          pointSize: 0,
                          curveType: 'function'
                      }
                    },
                  });

  // Add chart to panel
  panel_ts.clear();
  chart_container.clear();
  panel_ts.add(button_container).add(chart_container.add(chart));

});

// ----------------------------------
ui.root.clear();
ui.root.add(Map.add(panel));

// Set style options
Map.setOptions('Dark', {Dark: stylers.dark_mode});
Map.setOptions('SATELLITE');
Map.style().set({cursor:'crosshair'});

// Add legend to map
Map.add(makeLegend(PALETTE));

// Add state boundaries
Map.layers().set(0, ui.Map.Layer(state_outlines, {palette: 'gray'}, 'State boundaries'));

// Add most recent result to Map
var default_threshold = threshold_slider.getValue();
var init_layer = ui.Map.Layer(draw_map_fn(END_YEAR, default_threshold), {}, 'Mean condition score ' + END_YEAR);
Map.layers().set(1, init_layer);

Map.setCenter(-73.299, 43.011, 6);

Map.setControlVisibility({
    zoomControl: true,
    drawingToolsControl: false,
    layerList: true});