/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var v8_0 = ee.ImageCollection("projects/sites-project/baselines_v8-0_by_state_products_annual"),
    v8_0_monthly = ee.ImageCollection("projects/sites-project/baselines_v8-0_by_state_products_monthly"),
    hf_sites = ee.FeatureCollection("users/valeriepasquarella/HF_researchsites_poly"),
    table = ee.FeatureCollection("users/valeriepasquarella/REG09_IDS_damageareas_prj_shp");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var example = ee.Geometry.Point([-72.17448, 42.53966]);

var images = v8_0
    .filterMetadata('state', 'equals', 'MA');

// -----------------------------
var MIN = -4;
var MAX = 4;
var PALETTE = ['red', 'orange', 'white', 'teal', 'darkblue'];
var viz = {min: MIN, max: MAX, palette: PALETTE};

var THRESHOLD = -1.5;
var MIN_NOBS = 3;

var SELECT_LIST = {
  '1995': 1995,
  '1996': 1996,
  '1997': 1997,
  '1998': 1998,
  '1999': 1999,
  '2000': 2000,
  '2001': 2001,
  '2002': 2002,
  '2003': 2003,
  '2004': 2004,
  '2005': 2005,
  '2006': 2006,
  '2007': 2007,
  '2008': 2008,
  '2009': 2009,
  '2010': 2010, 
  '2011': 2011,
  '2012': 2012,
  '2013': 2013,
  '2014': 2014,
  '2015': 2015,
  '2016': 2016,
  '2017': 2017,
  '2018': 2018,
  '2019': 2019,
  '2020': 2020
}

var STATES = ee.FeatureCollection('TIGER/2018/States');

// ------------------------------------------
// Add range info for visualization
var get_range = function(img) {
  var mean = img.select('weighted_mean');
  var stddev = img.select('weighted_stddev');
  var lower = mean.subtract(stddev).rename('lower');
  var upper = mean.add(stddev).rename('upper');
  
  return img.addBands(lower).addBands(upper);
  
};

images = images.map(get_range);

// ------------------------------------------
// Set up UI Panel
var map = ui.Map();
var panel = ui.Panel({
    style: {
      width: '200px',
      height: '80px',
      position: 'top-left',
      backgroundColor: 'rgba(255, 255, 255, 0.5)'
    }
  });

var panel_ts = ui.Panel({
    style: {
      width: '600px',
      height: '230px',
      position: 'bottom-left',
      backgroundColor: 'rgba(255, 255, 255, 0.5)'
    }
  });
  
// Create colorbar for legend.
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '100x10',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '2px 2px'},
  });
}

// Build legend
function makeLegend(palette) {
  var legendTitle = ui.Label({
    value: 'Detected Change in Greenness',
    style: {
      fontWeight: 'bold',
      fontSize: '12px',
      margin: '0 0 2px 0',
      padding: '0',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });
    
  var labelPanel = ui.Panel({
      widgets: [
        ui.Label('Less Green', {margin: '0px 0px', backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'}),
        ui.Label(' ', {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal', backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'}),
        ui.Label('More Green', {margin: '0px 0px',backgroundColor: 'rgba(255, 255, 255, 0)', fontSize: '12px'})
      ],
      layout: ui.Panel.Layout.flow('horizontal'),
      style: { backgroundColor: 'rgba(255, 255, 255, 0)'}});
  
  return ui.Panel({
    widgets: [legendTitle, ColorBar(palette), labelPanel],
    style: {position: 'bottom-right',
      backgroundColor: 'rgba(255, 255, 255, 0.75)'
    }
  });
}


var select = ui.Select({
  items: Object.keys(SELECT_LIST),
  onChange: function(key) {
    map.layers().reset();

    select.style().set('stretch', 'horizontal');
    
    var assessment = images
      .filterMetadata('monitor_year', 'equals', SELECT_LIST[key])
      .mosaic();
    
    var score_disp = assessment
      .focal_mean(30, 'circle', 'meters', 1);
  
    var thresh_mask = score_disp.select('weighted_mean').lte(THRESHOLD).or(score_disp.select('weighted_mean').gte(THRESHOLD*-1));
    score_disp = score_disp.updateMask(thresh_mask);
    
    var nobs_mask = score_disp.select('total_nobs').gte(MIN_NOBS);
    score_disp = score_disp.updateMask(nobs_mask);
    
    
    // c = (1 / (1 + s))^0.6;
    // c = (TanH(7*(c - 0.5)) + 1)*0.5;
    var confidence_scale = ee.Image(1)
      .divide(score_disp.select('weighted_stddev').add(1))
      .pow(0.6)
      .subtract(0.5).multiply(7)
      .tanh()
      .add(1).multiply(0.5);
  
    var score_mean_viz_alpha = score_disp.select('weighted_mean')
        .visualize(viz)
        .toUint8()
        .updateMask(thresh_mask.multiply(confidence_scale));
    
    map.addLayer(score_mean_viz_alpha, {}, 'weighted score', true);
    map.addLayer(score_disp, {}, '(hidden)', false);
    
    redraw();
    
}});

var panel_title = ui.Label({
    value: 'ðŸ”Ž Year of disturbance:',
    style: {
      fontWeight: 'bold',
      fontSize: '12px',
      margin: '0 0 2px 0',
      padding: '0',
      backgroundColor: 'rgba(255, 255, 255, 0)'
    }
    });

select.setPlaceholder('Select a year');
select.style().set('stretch', 'horizontal');


/////////////////////

// Set a callback function for when the user clicks the map.
var dirtyMap = false;
map.onClick(function(coords) {
  if(dirtyMap === false){
    map.add(panel_ts);
    dirtyMap = true;
  }
  
  panel_ts.clear();
  // Find Path Row
  var pgeo = ee.Geometry.Point([coords.lon, coords.lat]);

  // Create or update the location label (the second widget in the panel)
  var location = 'Lon: ' + coords.lon.toFixed(2) + ' ' +
                 'Lat: ' + coords.lat.toFixed(2)
     
  // panel.widgets().set(1, ui.Label(location));

  // Add a pixel outline to the map where the user clicked.
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  map.layers().set(2, ui.Map.Layer(point, {color: 'white'}, 'Clicked point'));
  
  // Create charts
  var chart = ui.Chart.image.series(ee.ImageCollection(images).select(['lower', 'weighted_mean', 'upper']), point, ee.Reducer.first(), 30) 
                .setOptions({
                  vAxis: {
                    title: 'condition score',
                    viewWindow: {min: -5, max: 5},
                  },
                  series: {
                    0: {
                      labelInLegend: '-1Ïƒ',
                      color: 'grey',
                      lineWidth: 2, 
                      pointSize: 0,
                      curveType: 'function'
                    },
                    1: {
                      labelInLegend: '+1Ïƒ',
                      color: 'silver',
                      lineWidth: 2,
                      pointSize: 0,
                      curveType: 'function'
                    },
                    2: {
                      labelInLegend: 'mean',
                      color: 'black',
                      lineWidth: 0,
                      pointSize: 3
                    }
                  },
                });

  
  // Add chart to panel
  panel_ts.add(chart);


});

////////////////////////


panel.add(panel_title).add(select);
ui.root.clear();
ui.root.add(map.add(panel));

var states_list = images.aggregate_array('state')
    .distinct()
    .getInfo();
    
var states_display = STATES.filter(
    ee.Filter.inList('STUSPS', states_list)); 
    
var state_outlines = ee.Image().byte().paint({
    featureCollection: states_display,
    color: 1,
    width: 1
  });  

var style = {
  'Figure': [{
      featureType: 'all',
      stylers: [{ color: '#000000'}]
  }]
};

// Function to redraw "base" layers 
function redraw() {

  map.addLayer(state_outlines, {palette: 'gray'}, 'State boundaries');
  map.addLayer(example, {}, 'roi');
  
  map.setOptions(null, style);
  map.setOptions('SATELLITE');
  map.style().set({cursor:'crosshair'});
  
}

// Initialize map
map.add(makeLegend(PALETTE));
redraw();