// |
// | Landsat Time Series Harmonic Condition Assessment -- 
// | Mosaic results
// | 
// | [valpasq@bu.edu], 2020
// |
// |
// | This script reads in assessments generated for individual Paths
// | and combines them into a final wall-to-wall assessment product
// | to produce a single map per state

// ---------------------------------- Imports & Outputs ---------------------------------- 
var VERSION = '7-0'

var ROOT = 'projects/sites-project/';

var RESULTS_COLLECTION = ee.ImageCollection('baselines_v' + VERSION + '_by_state_monitoring')

var OUTPUT_COLLECTION = ROOT + 'baselines_v' + VERSION + '_by_state_products/'
var OUTPUT_CRS = 'EPSG:5070'

// -------------------------------- Assessment Parameters --------------------------------- 

var STATE = 'NY'

var START_ASSESS = 2010;
var END_ASSESS = 2020;

var MIN_MONITOR_NOBS = 3;
var MIN_RMSE_SCORE = -10;

// -------------------------------- Visualization --------------------------------- 

// Palette for mapped results

var MIN = -4;
var MAX = 0;
var PALETTE = ['red', 'orange', 'yellow', 'blue'];
var viz = {min: MIN, max: MAX, palette: PALETTE};

var THRESHOLD = -2;

// -------------------------------- Functions --------------------------------- 

var weightScore = function(image) {
 var score = image.select('mean_rmse_score')
 var nobs = image.select('tcg_count')
 
 nobs = nobs.updateMask(nobs.gte(MIN_MONITOR_NOBS))
 nobs = nobs.updateMask(score.gte(MIN_RMSE_SCORE))
 
 var weighted = score.multiply(nobs).rename('score_wt')
 
 return image.addBands(weighted).reproject(OUTPUT_CRS, null, 30)
}

// -------------------------------- Assessment --------------------------------- 
var bounds = RESULTS_COLLECTION.geometry().bounds()

var years = RESULTS_COLLECTION
    .filterMetadata('monitor_year', 'not_less_than', START_ASSESS)
    .filterMetadata('monitor_year', 'not_greater_than', END_ASSESS)
    .aggregate_array('monitor_year')
    .distinct()
var num_years = years.size().getInfo()
print(years)


for(var year = 0; year < num_years; year++){
  var year_value = years.get(year)
  
  var result = ee.ImageCollection(RESULTS_COLLECTION
    .filterMetadata('state', 'equals', STATE)
    .filterMetadata('monitor_year', 'equals', year_value))
  print(result)
  
  // Get total number of observations per pixel
  var totalObs = result.select('tcg_count').reduce('sum')
    .reproject(OUTPUT_CRS, null, 30)
  
  // Weight mean scores by nobs per Path
  var resultWts = result.map(weightScore)
  
  // Compute weighted mean
  var resultFinal = ee.Image(resultWts.select('score_wt')
    .reduce('sum')
    .divide(totalObs)
    .addBands(totalObs)
    .rename(['score_weighted', 'total_nobs'])
    .copyProperties(result.first(), null, ['WRS_PATH']))
  print(resultFinal)
  // resultFinal = resultFinal
  //     .updateMask(resultFinal.select('score_weighted').gte(-100))
  
  var score_disp = resultFinal
    .focal_mean(30, 'circle', 'meters', 1);
  var thresh_mask = score_disp.select('score_weighted').lte(THRESHOLD);
  score_disp = score_disp.updateMask(thresh_mask);
  
  var year_str = year_value.getInfo()
  Map.addLayer(score_disp.select('score_weighted'), viz, 'weighted score', true)
  
  // Export final product for full study area
  Export.image.toAsset({
    image: resultFinal,
    description: 'result_' + year_str + '_' + STATE,
    assetId: OUTPUT_COLLECTION + year_str + '_' + STATE,
    region: bounds,
    crs: OUTPUT_CRS,
    scale: 30,
    maxPixels: 1e13,
  })
}
// }

var style = {
  'Figure': [{
      featureType: 'all',
      stylers: [{ color: '#000000'}]
  }]
};

Map.setOptions(null, style);
Map.setOptions('SATELLITE')
